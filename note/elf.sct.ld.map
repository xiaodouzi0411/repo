ARM映像文件是一个层次性结构的文件，其中包含了域（region）、输出段（output section）和输入段（input section）。各部分关系如下：
1. 一个映像文件由一个或多个域组成
2. 每个域包含一个或多个输出段
3. 每个输出段包含一个或多个输入段
4. 各输入段包含了目标文件中的代码和数据

    输入段中包含了4类内容：代码、已经初始化的数据、未经初始化的存储区域、内容初始化成0的存储区域。每个输入段由相应的属性，可以为只读的（RO）、可读写的（RW）以及初始化成0的（ZI）。ARM连接器根据各输入段分组，再组成不同的输出段以及域。
    一个输出段中包含了一系列的具有相同的RO、RW和ZI属性的输入段。输出段的属性与其中包含输入段的属性相同。在一个输出段内部，各输入段是按照一定的规则排序的。
    一个域中包含了1~3个输出段，其中各输出段的属性各不相同。各输出段的排列顺序是由其属性决定的。其中，RO排列在最前面，其次是RW属性的输出段，最后是ZI属性的输出段。一个域通常映射到一个物理存储器上，如ROM和RAM等。

    ARM映像文件各组成部分的地址映射：分散加载机制允许为链接器制定映像的存储器映射信息，可实现对映像组件分组和布局的全面控制。分散加载通常仅用于具有复杂存储器映射的映像，也就是适合加载和执行时内存映射中的多个区时分散的情况。
    要构建映像的存储器映射，链接器必须由：描述如何分组成区的分组信息、描述映像区在存储映射中的放置地址的放置信息。
分散加载区分两类：
1. 加载区：该映像文件开始运行前存放的区域，即系统启动或加载时应用程序存放的区域。
2. 执行区：映像文件运行时的区域，即系统启动后，应用程序进行执行和数据访问的存储区域，系统在实时运行时可以有一个或多个执行块。


.sct:
    分散加载文件是一个文本文件，通过编写一个分散加载文件来制定ARM连接器在生成映像文件时如何分配RO，RW，ZI等数据的存放地址。如果不用SCATTER文件指定，那么ARM连接器会按照默认的方式来生成映像文件。



.elf:
    一种用于二进制文件、可执行文件、目标文件、共享库和核心转储格式文件。由四部分组成，分别是：ELF头、程序头表、节、节头表。


.ld:
    链接脚本要告诉链接器：输出什么；输入是什么；要用什么库，库放在什么地方；内存分布地址；提供启动代码一些全局地址变量
    其中MEMORY部分是用来补充SECTIONS命令的，用来描述目标CPU中可用的内存区域。它是可选的，如果没有这个命令，LD会认为SECTIONS描述的相邻的内存块之间有足够可用的内存。在SECTIONS中每个段的分布都没有考虑ARM能够寻址的地址中，ROM，RAM，FLASH是不是连续的。如果不连续怎么办？MEMORY就是设置各个区的起始位置，大小，属性的命令，在一个脚本中只能有一个。SECTIONS部分时脚本文件中最重要的元素，不可缺省。它的作用就是用来描述输出文件的布局。其中secname是输出文件段，而contents就是描述输出文件的这个段从哪些文件里抽取而来。


.map:
    map文件是程序的全局符号、源文件和代码行号信息的唯一的文本表示方法，是整个程序工程信息的静态文本，通常由linker生成。map文件保存整个工程的静态文本信息，里面由所有函数的入口地址。
    通过map文件，我们可以找到代码段（.text），全局未初始化区（.bss），数据段（.data）等。map文件的作用时，我们可以根据程序产生错误的地址，在map文件中找到相应的函数、变量地址

















